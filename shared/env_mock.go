// Code generated by MockGen. DO NOT EDIT.
// Source: shared/env.go

// Package shared is a generated GoMock package.
package shared

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEnv is a mock of Env interface
type MockEnv struct {
	ctrl     *gomock.Controller
	recorder *MockEnvMockRecorder
}

// MockEnvMockRecorder is the mock recorder for MockEnv
type MockEnvMockRecorder struct {
	mock *MockEnv
}

// NewMockEnv creates a new mock instance
func NewMockEnv(ctrl *gomock.Controller) *MockEnv {
	mock := &MockEnv{ctrl: ctrl}
	mock.recorder = &MockEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEnv) EXPECT() *MockEnvMockRecorder {
	return m.recorder
}

// GetDBHost mocks base method
func (m *MockEnv) GetDBHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBHost indicates an expected call of GetDBHost
func (mr *MockEnvMockRecorder) GetDBHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBHost", reflect.TypeOf((*MockEnv)(nil).GetDBHost))
}

// GetDBPort mocks base method
func (m *MockEnv) GetDBPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBPort indicates an expected call of GetDBPort
func (mr *MockEnvMockRecorder) GetDBPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBPort", reflect.TypeOf((*MockEnv)(nil).GetDBPort))
}

// GetDBUser mocks base method
func (m *MockEnv) GetDBUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBUser indicates an expected call of GetDBUser
func (mr *MockEnvMockRecorder) GetDBUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBUser", reflect.TypeOf((*MockEnv)(nil).GetDBUser))
}

// GetDBPassword mocks base method
func (m *MockEnv) GetDBPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBPassword indicates an expected call of GetDBPassword
func (mr *MockEnvMockRecorder) GetDBPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBPassword", reflect.TypeOf((*MockEnv)(nil).GetDBPassword))
}

// GetDBName mocks base method
func (m *MockEnv) GetDBName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDBName indicates an expected call of GetDBName
func (mr *MockEnvMockRecorder) GetDBName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBName", reflect.TypeOf((*MockEnv)(nil).GetDBName))
}

// GetServerPort mocks base method
func (m *MockEnv) GetServerPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerPort indicates an expected call of GetServerPort
func (mr *MockEnvMockRecorder) GetServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockEnv)(nil).GetServerPort))
}
