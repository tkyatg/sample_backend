// Code generated by MockGen. DO NOT EDIT.
// Source: services/user/queries/userQuery/usecase.go

// Package userquery is a generated GoMock package.
package userquery

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecase is a mock of Usecase interface
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// getUserList mocks base method
func (m *MockUsecase) getUserList() ([]getUserListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserList")
	ret0, _ := ret[0].([]getUserListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserList indicates an expected call of getUserList
func (mr *MockUsecaseMockRecorder) getUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserList", reflect.TypeOf((*MockUsecase)(nil).getUserList))
}

// getUserByID mocks base method
func (m *MockUsecase) getUserByID(req getUserByIDRequest) (getUserByIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByID", req)
	ret0, _ := ret[0].(getUserByIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByID indicates an expected call of getUserByID
func (mr *MockUsecaseMockRecorder) getUserByID(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByID", reflect.TypeOf((*MockUsecase)(nil).getUserByID), req)
}

// MockDataAccessor is a mock of DataAccessor interface
type MockDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessorMockRecorder
}

// MockDataAccessorMockRecorder is the mock recorder for MockDataAccessor
type MockDataAccessorMockRecorder struct {
	mock *MockDataAccessor
}

// NewMockDataAccessor creates a new mock instance
func NewMockDataAccessor(ctrl *gomock.Controller) *MockDataAccessor {
	mock := &MockDataAccessor{ctrl: ctrl}
	mock.recorder = &MockDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataAccessor) EXPECT() *MockDataAccessorMockRecorder {
	return m.recorder
}

// getUserList mocks base method
func (m *MockDataAccessor) getUserList() ([]getUserListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserList")
	ret0, _ := ret[0].([]getUserListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserList indicates an expected call of getUserList
func (mr *MockDataAccessorMockRecorder) getUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserList", reflect.TypeOf((*MockDataAccessor)(nil).getUserList))
}

// getUserByID mocks base method
func (m *MockDataAccessor) getUserByID(req getUserByIDRequest) (getUserByIDResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByID", req)
	ret0, _ := ret[0].(getUserByIDResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByID indicates an expected call of getUserByID
func (mr *MockDataAccessorMockRecorder) getUserByID(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByID", reflect.TypeOf((*MockDataAccessor)(nil).getUserByID), req)
}
