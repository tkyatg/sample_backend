// Code generated by MockGen. DO NOT EDIT.
// Source: services/user/domain/userRepository.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserRepository) Create(attr *CreateUserAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", attr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryMockRecorder) Create(attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), attr)
}

// MockUserDataAccessor is a mock of UserDataAccessor interface
type MockUserDataAccessor struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataAccessorMockRecorder
}

// MockUserDataAccessorMockRecorder is the mock recorder for MockUserDataAccessor
type MockUserDataAccessorMockRecorder struct {
	mock *MockUserDataAccessor
}

// NewMockUserDataAccessor creates a new mock instance
func NewMockUserDataAccessor(ctrl *gomock.Controller) *MockUserDataAccessor {
	mock := &MockUserDataAccessor{ctrl: ctrl}
	mock.recorder = &MockUserDataAccessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDataAccessor) EXPECT() *MockUserDataAccessorMockRecorder {
	return m.recorder
}

// create mocks base method
func (m *MockUserDataAccessor) create(attr *CreateUserAttributes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "create", attr)
	ret0, _ := ret[0].(error)
	return ret0
}

// create indicates an expected call of create
func (mr *MockUserDataAccessorMockRecorder) create(attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "create", reflect.TypeOf((*MockUserDataAccessor)(nil).create), attr)
}
